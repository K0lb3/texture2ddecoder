name: Windows & Mac Build

on: [push, pull_request]

jobs:
  # Build the wheels for Linux, Windows and macOS for Python 3.6 and newer
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}
    #needs: check_build_trigger
    #if: needs.check_build_trigger.outputs.build

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python: [36, 37, 38, 39, 310]
        bitness: [32, 64]
        manylinux_image: [manylinux1, manylinux2010, manylinux_x_y]
        include:
          # Run 32 and 64 bit version in parallel for Linux and Windows
          - os: windows-latest
            bitness: 64
            platform_id: win_amd64
          - os: windows-latest
            bitness: 32
            platform_id: win32
          - os: ubuntu-latest
            bitness: 64
            platform_id: manylinux_x86_64
          - os: ubuntu-latest
            bitness: 32
            platform_id: manylinux_i686
          - os: macos-latest
            bitness: 64
            platform_id: macosx_x86_64
        exclude:
          - os: macos-latest
            bitness: 32
          # Remove manylinux1 from the windows and osx build matrix since
          # manylinux_image is not used for these platforms
          - os: windows-latest
            manylinux_image: manylinux1
          - os: macos-latest
            manylinux_image: manylinux1
    
    steps:
      - uses: actions/checkout@v2

      # Setup for Windows - installs the correct python architecture, x86 / x64
      - name: Set up Python (Win) ${{ matrix.python-version }} ${{ matrix.architecture }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
        if: runner.os == 'Windows'

      # Setup for Mac & Linux, both don't support architecture selection without using specific versions
      - name: Set up Python (Non-Win) ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
        if: runner.os != 'Windows'

      # Display the versions
      - name: Show runner information
        run: |
          python --version
          pip --version

      # Installs the dependencies, add yours here
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel pytest twine pillow

      # Syntax check
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Build
      - name: Build package
        run: python setup.py build

      # Install Local
      - name: Install package
        run: python setup.py install --user

      # Run Tests, have to be in a file with test in name in a folder named tests with functions with test in the name
      - name: Run tests
        run: pytest -v -s

      # Create wheels for deployment
      - name: Build wheels
        run: python setup.py sdist bdist_wheel --skip-build

      # Deploy
      - name: Publish
        if: success() && runner.os != 'Linux' && github.event_name == 'push'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/* --skip-existing
